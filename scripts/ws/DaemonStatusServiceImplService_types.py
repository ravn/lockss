##################################################
# file: DaemonStatusServiceImplService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b DaemonStatusService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://status.ws.lockss.org/
##############################

class ns0:
    targetNamespace = "http://status.ws.lockss.org/"

    class queryTdbAus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbAus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbAus_Def.schema
            TClist = [ZSI.TC.String(pname="tdbAuQuery", aname="_tdbAuQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tdbAuQuery = None
                    return
            Holder.__name__ = "queryTdbAus_Holder"
            self.pyclass = Holder

    class queryTdbAusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbAusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbAusResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","tdbAuWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryTdbAusResponse_Holder"
            self.pyclass = Holder

    class tdbAuWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "tdbAuWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tdbAuWsResult_Def.schema
            TClist = [ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.attrs_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="down", aname="_down", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.params_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pluginName", aname="_pluginName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.props_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","tdbPublisherWsResult",lazy=False)(pname="tdbPublisher", aname="_tdbPublisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","tdbTitleWsResult",lazy=False)(pname="tdbTitle", aname="_tdbTitle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._active = None
                    self._attrs = None
                    self._auId = None
                    self._down = None
                    self._name = None
                    self._params = None
                    self._pluginName = None
                    self._props = None
                    self._tdbPublisher = None
                    self._tdbTitle = None
                    return
            Holder.__name__ = "tdbAuWsResult_Holder"
            self.pyclass = Holder


        class attrs_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "attrs"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.tdbAuWsResult_Def.attrs_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","attrs")
                kw["aname"] = "_attrs"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "attrs_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.tdbAuWsResult_Def.attrs_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder








        class params_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "params"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.tdbAuWsResult_Def.params_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","params")
                kw["aname"] = "_params"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "params_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.tdbAuWsResult_Def.params_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder








        class props_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "props"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.tdbAuWsResult_Def.props_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","props")
                kw["aname"] = "_props"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "props_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.tdbAuWsResult_Def.props_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class tdbPublisherWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "tdbPublisherWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tdbPublisherWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    return
            Holder.__name__ = "tdbPublisherWsResult_Holder"
            self.pyclass = Holder

    class tdbTitleWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "tdbTitleWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tdbTitleWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="EIssn", aname="_EIssn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issn", aname="_issn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issnL", aname="_issnL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issns", aname="_issns", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="printIssn", aname="_printIssn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proprietaryId", aname="_proprietaryId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proprietaryIds", aname="_proprietaryIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicationType", aname="_publicationType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","tdbPublisherWsResult",lazy=False)(pname="tdbPublisher", aname="_tdbPublisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EIssn = None
                    self._id = None
                    self._issn = None
                    self._issnL = None
                    self._issns = []
                    self._name = None
                    self._printIssn = None
                    self._proprietaryId = None
                    self._proprietaryIds = []
                    self._publicationType = None
                    self._tdbPublisher = None
                    return
            Holder.__name__ = "tdbTitleWsResult_Holder"
            self.pyclass = Holder

    class lockssWebServicesFaultInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "lockssWebServicesFaultInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lockssWebServicesFaultInfo_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "lockssWebServicesFaultInfo_Holder"
            self.pyclass = Holder

    class getPlatformConfiguration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getPlatformConfiguration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPlatformConfiguration_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getPlatformConfiguration_Holder"
            self.pyclass = Holder

    class getPlatformConfigurationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getPlatformConfigurationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPlatformConfigurationResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","platformConfigurationWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getPlatformConfigurationResponse_Holder"
            self.pyclass = Holder

    class platformConfigurationWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "platformConfigurationWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.platformConfigurationWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="adminEmail", aname="_adminEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="buildHost", aname="_buildHost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="buildTimestamp", aname="_buildTimestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="currentTime", aname="_currentTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currentWorkingDirectory", aname="_currentWorkingDirectory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","daemonVersionWsResult",lazy=False)(pname="daemonVersion", aname="_daemonVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disks", aname="_disks", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groups", aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostName", aname="_hostName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","javaVersionWsResult",lazy=False)(pname="javaVersion", aname="_javaVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mailRelay", aname="_mailRelay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","platformWsResult",lazy=False)(pname="platform", aname="_platform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="project", aname="_project", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="properties", aname="_properties", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="uptime", aname="_uptime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="v3Identity", aname="_v3Identity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adminEmail = None
                    self._buildHost = None
                    self._buildTimestamp = None
                    self._currentTime = None
                    self._currentWorkingDirectory = None
                    self._daemonVersion = None
                    self._disks = []
                    self._groups = []
                    self._hostName = None
                    self._ipAddress = None
                    self._javaVersion = None
                    self._mailRelay = None
                    self._platform = None
                    self._project = None
                    self._properties = []
                    self._uptime = None
                    self._v3Identity = None
                    return
            Holder.__name__ = "platformConfigurationWsResult_Holder"
            self.pyclass = Holder

    class daemonVersionWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "daemonVersionWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.daemonVersionWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="buildVersion", aname="_buildVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullVersion", aname="_fullVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="majorVersion", aname="_majorVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="minorVersion", aname="_minorVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._buildVersion = None
                    self._fullVersion = None
                    self._majorVersion = None
                    self._minorVersion = None
                    return
            Holder.__name__ = "daemonVersionWsResult_Holder"
            self.pyclass = Holder

    class javaVersionWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "javaVersionWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.javaVersionWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="runtimeName", aname="_runtimeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="runtimeVersion", aname="_runtimeVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="specificationVersion", aname="_specificationVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runtimeName = None
                    self._runtimeVersion = None
                    self._specificationVersion = None
                    self._version = None
                    return
            Holder.__name__ = "javaVersionWsResult_Holder"
            self.pyclass = Holder

    class platformWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "platformWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.platformWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="suffix", aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._suffix = None
                    self._version = None
                    return
            Holder.__name__ = "platformWsResult_Holder"
            self.pyclass = Holder

    class queryVotes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryVotes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryVotes_Def.schema
            TClist = [ZSI.TC.String(pname="voteQuery", aname="_voteQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._voteQuery = None
                    return
            Holder.__name__ = "queryVotes_Holder"
            self.pyclass = Holder

    class queryVotesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryVotesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryVotesResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","voteWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryVotesResponse_Holder"
            self.pyclass = Holder

    class voteWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "voteWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.voteWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="agreedUrlCount", aname="_agreedUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="agreementHint", aname="_agreementHint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auName", aname="_auName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="callerId", aname="_callerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currentState", aname="_currentState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="deadline", aname="_deadline", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="disagreedUrlCount", aname="_disagreedUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="duration", aname="_duration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorDetail", aname="_errorDetail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isPollActive", aname="_isPollActive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isSymmetricPoll", aname="_isSymmetricPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pollerNonce", aname="_pollerNonce", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pollerOnlyUrlCount", aname="_pollerOnlyUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="remainingTime", aname="_remainingTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="voteDeadline", aname="_voteDeadline", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="voteKey", aname="_voteKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="voteStatus", aname="_voteStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="voterNonce", aname="_voterNonce", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="voterNonce2", aname="_voterNonce2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="voterOnlyUrlCount", aname="_voterOnlyUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._agreedUrlCount = None
                    self._agreementHint = None
                    self._auId = None
                    self._auName = None
                    self._callerId = None
                    self._currentState = None
                    self._deadline = None
                    self._disagreedUrlCount = None
                    self._duration = None
                    self._errorDetail = None
                    self._isPollActive = None
                    self._isSymmetricPoll = None
                    self._pollerNonce = None
                    self._pollerOnlyUrlCount = None
                    self._remainingTime = None
                    self._startTime = None
                    self._voteDeadline = None
                    self._voteKey = None
                    self._voteStatus = None
                    self._voterNonce = None
                    self._voterNonce2 = None
                    self._voterOnlyUrlCount = None
                    return
            Holder.__name__ = "voteWsResult_Holder"
            self.pyclass = Holder

    class queryPeers_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPeers")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPeers_Def.schema
            TClist = [ZSI.TC.String(pname="peerQuery", aname="_peerQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._peerQuery = None
                    return
            Holder.__name__ = "queryPeers_Holder"
            self.pyclass = Holder

    class queryPeersResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPeersResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPeersResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","peerWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryPeersResponse_Holder"
            self.pyclass = Holder

    class peerWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "peerWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.peerWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="groups", aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="invitationCount", aname="_invitationCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastInvitation", aname="_lastInvitation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastMessage", aname="_lastMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastPoll", aname="_lastPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastVote", aname="_lastVote", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="messageCount", aname="_messageCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="messageType", aname="_messageType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nakReason", aname="_nakReason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="peerId", aname="_peerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="platformGroupMatch", aname="_platformGroupMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="pollsCalled", aname="_pollsCalled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="pollsRejected", aname="_pollsRejected", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="votesCast", aname="_votesCast", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groups = []
                    self._invitationCount = None
                    self._lastInvitation = None
                    self._lastMessage = None
                    self._lastPoll = None
                    self._lastVote = None
                    self._messageCount = None
                    self._messageType = None
                    self._nakReason = None
                    self._peerId = None
                    self._platformGroupMatch = None
                    self._pollsCalled = None
                    self._pollsRejected = None
                    self._votesCast = None
                    return
            Holder.__name__ = "peerWsResult_Holder"
            self.pyclass = Holder

    class getAuStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getAuStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuStatus_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    return
            Holder.__name__ = "getAuStatus_Holder"
            self.pyclass = Holder

    class getAuStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getAuStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuStatusResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","auStatus",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getAuStatusResponse_Holder"
            self.pyclass = Holder

    class auStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "auStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auStatus_Def.schema
            TClist = [ZSI.TC.String(pname="accessType", aname="_accessType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="availableFromPublisher", aname="_availableFromPublisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="contentSize", aname="_contentSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlPool", aname="_crawlPool", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlProxy", aname="_crawlProxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlWindow", aname="_crawlWindow", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="creationTime", aname="_creationTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="currentlyCrawling", aname="_currentlyCrawling", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="currentlyPolling", aname="_currentlyPolling", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="diskUsage", aname="_diskUsage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="journalTitle", aname="_journalTitle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCompletedCrawl", aname="_lastCompletedCrawl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCompletedPoll", aname="_lastCompletedPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCrawl", aname="_lastCrawl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastCrawlResult", aname="_lastCrawlResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastPoll", aname="_lastPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastPollResult", aname="_lastPollResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pluginName", aname="_pluginName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publisher", aname="_publisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publishingPlatform", aname="_publishingPlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="recentPollAgreement", aname="_recentPollAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repository", aname="_repository", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subscriptionStatus", aname="_subscriptionStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="substanceState", aname="_substanceState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="volume", aname="_volume", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="year", aname="_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessType = None
                    self._availableFromPublisher = None
                    self._contentSize = None
                    self._crawlPool = None
                    self._crawlProxy = None
                    self._crawlWindow = None
                    self._creationTime = None
                    self._currentlyCrawling = None
                    self._currentlyPolling = None
                    self._diskUsage = None
                    self._journalTitle = None
                    self._lastCompletedCrawl = None
                    self._lastCompletedPoll = None
                    self._lastCrawl = None
                    self._lastCrawlResult = None
                    self._lastPoll = None
                    self._lastPollResult = None
                    self._pluginName = None
                    self._publisher = None
                    self._publishingPlatform = None
                    self._recentPollAgreement = None
                    self._repository = None
                    self._status = None
                    self._subscriptionStatus = None
                    self._substanceState = None
                    self._volume = None
                    self._year = None
                    return
            Holder.__name__ = "auStatus_Holder"
            self.pyclass = Holder

    class queryPlugins_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPlugins")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPlugins_Def.schema
            TClist = [ZSI.TC.String(pname="pluginQuery", aname="_pluginQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pluginQuery = None
                    return
            Holder.__name__ = "queryPlugins_Holder"
            self.pyclass = Holder

    class queryPluginsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPluginsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPluginsResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","pluginWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryPluginsResponse_Holder"
            self.pyclass = Holder

    class pluginWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "pluginWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pluginWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="auCount", aname="_auCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.definition_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pluginId", aname="_pluginId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publishingPlatform", aname="_publishingPlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="registry", aname="_registry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auCount = None
                    self._definition = None
                    self._name = None
                    self._pluginId = None
                    self._publishingPlatform = None
                    self._registry = None
                    self._type = None
                    self._url = None
                    self._version = None
                    return
            Holder.__name__ = "pluginWsResult_Holder"
            self.pyclass = Holder


        class definition_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "definition"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.pluginWsResult_Def.definition_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","definition")
                kw["aname"] = "_definition"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "definition_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.pluginWsResult_Def.definition_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class getAuIds_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getAuIds")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuIds_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAuIds_Holder"
            self.pyclass = Holder

    class getAuIdsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "getAuIdsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuIdsResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","idNamePair",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAuIdsResponse_Holder"
            self.pyclass = Holder

    class idNamePair_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "idNamePair")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.idNamePair_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    return
            Holder.__name__ = "idNamePair_Holder"
            self.pyclass = Holder

    class queryAus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryAus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryAus_Def.schema
            TClist = [ZSI.TC.String(pname="auQuery", aname="_auQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auQuery = None
                    return
            Holder.__name__ = "queryAus_Holder"
            self.pyclass = Holder

    class queryAusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryAusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryAusResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","auWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryAusResponse_Holder"
            self.pyclass = Holder

    class auWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "auWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="accessType", aname="_accessType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","auConfigurationWsResult",lazy=False)(pname="auConfiguration", aname="_auConfiguration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="availableFromPublisher", aname="_availableFromPublisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="contentSize", aname="_contentSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlPool", aname="_crawlPool", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlProxy", aname="_crawlProxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlWindow", aname="_crawlWindow", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="creationTime", aname="_creationTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="currentlyCrawling", aname="_currentlyCrawling", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="currentlyPolling", aname="_currentlyPolling", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="diskUsage", aname="_diskUsage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isBulkContent", aname="_isBulkContent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCompletedCrawl", aname="_lastCompletedCrawl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCompletedPoll", aname="_lastCompletedPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastCrawl", aname="_lastCrawl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastCrawlResult", aname="_lastCrawlResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastPoll", aname="_lastPoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastPollResult", aname="_lastPollResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newContentCrawlUrls", aname="_newContentCrawlUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","peerAgreementsWsResult",lazy=False)(pname="peerAgreements", aname="_peerAgreements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pluginName", aname="_pluginName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publishingPlatform", aname="_publishingPlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="recentPollAgreement", aname="_recentPollAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositoryPath", aname="_repositoryPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subscriptionStatus", aname="_subscriptionStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="substanceState", aname="_substanceState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tdbPublisher", aname="_tdbPublisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tdbYear", aname="_tdbYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="urlStems", aname="_urlStems", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="volume", aname="_volume", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessType = None
                    self._auConfiguration = None
                    self._auId = None
                    self._availableFromPublisher = None
                    self._contentSize = None
                    self._crawlPool = None
                    self._crawlProxy = None
                    self._crawlWindow = None
                    self._creationTime = None
                    self._currentlyCrawling = None
                    self._currentlyPolling = None
                    self._diskUsage = None
                    self._isBulkContent = None
                    self._lastCompletedCrawl = None
                    self._lastCompletedPoll = None
                    self._lastCrawl = None
                    self._lastCrawlResult = None
                    self._lastPoll = None
                    self._lastPollResult = None
                    self._name = None
                    self._newContentCrawlUrls = []
                    self._peerAgreements = []
                    self._pluginName = None
                    self._publishingPlatform = None
                    self._recentPollAgreement = None
                    self._repositoryPath = None
                    self._subscriptionStatus = None
                    self._substanceState = None
                    self._tdbPublisher = None
                    self._tdbYear = None
                    self._urlStems = []
                    self._volume = None
                    return
            Holder.__name__ = "auWsResult_Holder"
            self.pyclass = Holder

    class auConfigurationWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "auConfigurationWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auConfigurationWsResult_Def.schema
            TClist = [self.__class__.defParams_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.nonDefParams_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._defParams = None
                    self._nonDefParams = None
                    return
            Holder.__name__ = "auConfigurationWsResult_Holder"
            self.pyclass = Holder


        class defParams_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "defParams"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.auConfigurationWsResult_Def.defParams_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (None,"defParams")
                kw["aname"] = "_defParams"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "defParams_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.auConfigurationWsResult_Def.defParams_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder








        class nonDefParams_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "nonDefParams"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.auConfigurationWsResult_Def.nonDefParams_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (None,"nonDefParams")
                kw["aname"] = "_nonDefParams"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "nonDefParams_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.auConfigurationWsResult_Def.nonDefParams_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class peerAgreementsWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "peerAgreementsWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.peerAgreementsWsResult_Def.schema
            TClist = [self.__class__.agreements_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="peerId", aname="_peerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._agreements = None
                    self._peerId = None
                    return
            Holder.__name__ = "peerAgreementsWsResult_Holder"
            self.pyclass = Holder


        class agreements_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "agreements"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.peerAgreementsWsResult_Def.agreements_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (None,"agreements")
                kw["aname"] = "_agreements"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "agreements_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.peerAgreementsWsResult_Def.agreements_Dec.entry_Dec.schema
                    TClist = [GTD("http://status.ws.lockss.org/","agreementTypeWsResult",lazy=False)(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","peerAgreementWsResult",lazy=False)(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = (None,"entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class peerAgreementWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "peerAgreementWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.peerAgreementWsResult_Def.schema
            TClist = [ZSI.TCnumbers.FPfloat(pname="highestPercentAgreement", aname="_highestPercentAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="highestPercentAgreementTimestamp", aname="_highestPercentAgreementTimestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="percentAgreement", aname="_percentAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="percentAgreementTimestamp", aname="_percentAgreementTimestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._highestPercentAgreement = None
                    self._highestPercentAgreementTimestamp = None
                    self._percentAgreement = None
                    self._percentAgreementTimestamp = None
                    return
            Holder.__name__ = "peerAgreementWsResult_Holder"
            self.pyclass = Holder

    class queryPolls_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPolls")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPolls_Def.schema
            TClist = [ZSI.TC.String(pname="pollQuery", aname="_pollQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pollQuery = None
                    return
            Holder.__name__ = "queryPolls_Holder"
            self.pyclass = Holder

    class queryPollsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryPollsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryPollsResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","pollWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryPollsResponse_Holder"
            self.pyclass = Holder

    class pollWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "pollWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pollWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="activeRepairCount", aname="_activeRepairCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","repairWsResult",lazy=False)(pname="activeRepairs", aname="_activeRepairs", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additionalInfo", aname="_additionalInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="agreedUrlCount", aname="_agreedUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="agreedUrls", aname="_agreedUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auName", aname="_auName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesHashedCount", aname="_bytesHashedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesReadCount", aname="_bytesReadCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="completedRepairCount", aname="_completedRepairCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","repairWsResult",lazy=False)(pname="completedRepairs", aname="_completedRepairs", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="deadline", aname="_deadline", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="disagreedUrlCount", aname="_disagreedUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disagreedUrls", aname="_disagreedUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="duration", aname="_duration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="endTime", aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorDetail", aname="_errorDetail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.errorUrls_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hashErrorCount", aname="_hashErrorCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="noQuorumUrlCount", aname="_noQuorumUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="noQuorumUrls", aname="_noQuorumUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="participantCount", aname="_participantCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","participantWsResult",lazy=False)(pname="participants", aname="_participants", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="percentAgreement", aname="_percentAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pollKey", aname="_pollKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pollStatus", aname="_pollStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pollVariant", aname="_pollVariant", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="quorum", aname="_quorum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="remainingTime", aname="_remainingTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="talliedUrlCount", aname="_talliedUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="talliedUrls", aname="_talliedUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="tooCloseUrlCount", aname="_tooCloseUrlCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tooCloseUrls", aname="_tooCloseUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="voteDeadline", aname="_voteDeadline", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._activeRepairCount = None
                    self._activeRepairs = []
                    self._additionalInfo = None
                    self._agreedUrlCount = None
                    self._agreedUrls = []
                    self._auId = None
                    self._auName = None
                    self._bytesHashedCount = None
                    self._bytesReadCount = None
                    self._completedRepairCount = None
                    self._completedRepairs = []
                    self._deadline = None
                    self._disagreedUrlCount = None
                    self._disagreedUrls = []
                    self._duration = None
                    self._endTime = None
                    self._errorDetail = None
                    self._errorUrls = None
                    self._hashErrorCount = None
                    self._noQuorumUrlCount = None
                    self._noQuorumUrls = []
                    self._participantCount = None
                    self._participants = []
                    self._percentAgreement = None
                    self._pollKey = None
                    self._pollStatus = None
                    self._pollVariant = None
                    self._quorum = None
                    self._remainingTime = None
                    self._startTime = None
                    self._talliedUrlCount = None
                    self._talliedUrls = []
                    self._tooCloseUrlCount = None
                    self._tooCloseUrls = []
                    self._voteDeadline = None
                    return
            Holder.__name__ = "pollWsResult_Holder"
            self.pyclass = Holder


        class errorUrls_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "errorUrls"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.pollWsResult_Def.errorUrls_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","errorUrls")
                kw["aname"] = "_errorUrls"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "errorUrls_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.pollWsResult_Def.errorUrls_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class repairWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "repairWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.repairWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="peerId", aname="_peerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._peerId = None
                    self._url = None
                    return
            Holder.__name__ = "repairWsResult_Holder"
            self.pyclass = Holder

    class participantWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "participantWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.participantWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="agreedVoteCount", aname="_agreedVoteCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesHashed", aname="_bytesHashed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesRead", aname="_bytesRead", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currentState", aname="_currentState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="disagreedVoteCount", aname="_disagreedVoteCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hasVoted", aname="_hasVoted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isExParticipant", aname="_isExParticipant", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastStateChange", aname="_lastStateChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="peerId", aname="_peerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="peerStatus", aname="_peerStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="percentAgreement", aname="_percentAgreement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="pollerOnlyVoteCount", aname="_pollerOnlyVoteCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="voterOnlyVotecount", aname="_voterOnlyVotecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._agreedVoteCount = None
                    self._bytesHashed = None
                    self._bytesRead = None
                    self._currentState = None
                    self._disagreedVoteCount = None
                    self._hasVoted = None
                    self._isExParticipant = None
                    self._lastStateChange = None
                    self._peerId = None
                    self._peerStatus = None
                    self._percentAgreement = None
                    self._pollerOnlyVoteCount = None
                    self._voterOnlyVotecount = None
                    return
            Holder.__name__ = "participantWsResult_Holder"
            self.pyclass = Holder

    class queryTdbTitles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbTitles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbTitles_Def.schema
            TClist = [ZSI.TC.String(pname="tdbTitleQuery", aname="_tdbTitleQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tdbTitleQuery = None
                    return
            Holder.__name__ = "queryTdbTitles_Holder"
            self.pyclass = Holder

    class queryTdbTitlesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbTitlesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbTitlesResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","tdbTitleWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryTdbTitlesResponse_Holder"
            self.pyclass = Holder

    class queryCrawls_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryCrawls")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryCrawls_Def.schema
            TClist = [ZSI.TC.String(pname="crawlQuery", aname="_crawlQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._crawlQuery = None
                    return
            Holder.__name__ = "queryCrawls_Holder"
            self.pyclass = Holder

    class queryCrawlsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryCrawlsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryCrawlsResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","crawlWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryCrawlsResponse_Holder"
            self.pyclass = Holder

    class crawlWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "crawlWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.crawlWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auName", aname="_auName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesFetchedCount", aname="_bytesFetchedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlKey", aname="_crawlKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlStatus", aname="_crawlStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crawlType", aname="_crawlType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="duration", aname="_duration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="linkDepth", aname="_linkDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="mimeTypeCount", aname="_mimeTypeCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mimeTypes", aname="_mimeTypes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="offSiteUrlsExcludedCount", aname="_offSiteUrlsExcludedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pagesExcluded", aname="_pagesExcluded", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesExcludedCount", aname="_pagesExcludedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pagesFetched", aname="_pagesFetched", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesFetchedCount", aname="_pagesFetchedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pagesNotModified", aname="_pagesNotModified", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesNotModifiedCount", aname="_pagesNotModifiedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pagesParsed", aname="_pagesParsed", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesParsedCount", aname="_pagesParsedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pagesPending", aname="_pagesPending", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesPendingCount", aname="_pagesPendingCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://status.ws.lockss.org/","urlErrorWsResult",lazy=False)(pname="pagesWithErrors", aname="_pagesWithErrors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pagesWithErrorsCount", aname="_pagesWithErrorsCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="refetchDepth", aname="_refetchDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sources", aname="_sources", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startingUrls", aname="_startingUrls", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    self._auName = None
                    self._bytesFetchedCount = None
                    self._crawlKey = None
                    self._crawlStatus = None
                    self._crawlType = None
                    self._duration = None
                    self._linkDepth = None
                    self._mimeTypeCount = None
                    self._mimeTypes = []
                    self._offSiteUrlsExcludedCount = None
                    self._pagesExcluded = []
                    self._pagesExcludedCount = None
                    self._pagesFetched = []
                    self._pagesFetchedCount = None
                    self._pagesNotModified = []
                    self._pagesNotModifiedCount = None
                    self._pagesParsed = []
                    self._pagesParsedCount = None
                    self._pagesPending = []
                    self._pagesPendingCount = None
                    self._pagesWithErrors = []
                    self._pagesWithErrorsCount = None
                    self._refetchDepth = None
                    self._sources = []
                    self._startTime = None
                    self._startingUrls = []
                    return
            Holder.__name__ = "crawlWsResult_Holder"
            self.pyclass = Holder

    class urlErrorWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "urlErrorWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.urlErrorWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="severity", aname="_severity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._severity = None
                    self._url = None
                    return
            Holder.__name__ = "urlErrorWsResult_Holder"
            self.pyclass = Holder

    class isDaemonReady_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "isDaemonReady")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.isDaemonReady_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "isDaemonReady_Holder"
            self.pyclass = Holder

    class isDaemonReadyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "isDaemonReadyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.isDaemonReadyResponse_Def.schema
            TClist = [ZSI.TC.Boolean(pname="return", aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "isDaemonReadyResponse_Holder"
            self.pyclass = Holder

    class queryRepositories_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryRepositories")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRepositories_Def.schema
            TClist = [ZSI.TC.String(pname="repositoryQuery", aname="_repositoryQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._repositoryQuery = None
                    return
            Holder.__name__ = "queryRepositories_Holder"
            self.pyclass = Holder

    class queryRepositoriesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryRepositoriesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRepositoriesResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","repositoryWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryRepositoriesResponse_Holder"
            self.pyclass = Holder

    class repositoryWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "repositoryWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.repositoryWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="auName", aname="_auName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="directoryName", aname="_directoryName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="diskUsage", aname="_diskUsage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="internal", aname="_internal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.params_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pluginName", aname="_pluginName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositorySpaceId", aname="_repositorySpaceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auName = None
                    self._directoryName = None
                    self._diskUsage = None
                    self._internal = None
                    self._params = None
                    self._pluginName = None
                    self._repositorySpaceId = None
                    self._status = None
                    return
            Holder.__name__ = "repositoryWsResult_Holder"
            self.pyclass = Holder


        class params_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "params"
            schema = "http://status.ws.lockss.org/"
            def __init__(self, **kw):
                ns = ns0.repositoryWsResult_Def.params_Dec.schema
                TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://status.ws.lockss.org/","params")
                kw["aname"] = "_params"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._entry = []
                        return
                Holder.__name__ = "params_Holder"
                self.pyclass = Holder


            class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "entry"
                schema = "http://status.ws.lockss.org/"
                def __init__(self, **kw):
                    ns = ns0.repositoryWsResult_Def.params_Dec.entry_Dec.schema
                    TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://status.ws.lockss.org/","entry")
                    kw["aname"] = "_entry"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._key = None
                            self._value = None
                            return
                    Holder.__name__ = "entry_Holder"
                    self.pyclass = Holder







    class queryRepositorySpaces_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryRepositorySpaces")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRepositorySpaces_Def.schema
            TClist = [ZSI.TC.String(pname="repositorySpaceQuery", aname="_repositorySpaceQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._repositorySpaceQuery = None
                    return
            Holder.__name__ = "queryRepositorySpaces_Holder"
            self.pyclass = Holder

    class queryRepositorySpacesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryRepositorySpacesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRepositorySpacesResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","repositorySpaceWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryRepositorySpacesResponse_Holder"
            self.pyclass = Holder

    class repositorySpaceWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "repositorySpaceWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.repositorySpaceWsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="activeCount", aname="_activeCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="deletedCount", aname="_deletedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="free", aname="_free", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="inactiveCount", aname="_inactiveCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="orphanedCount", aname="_orphanedCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="percentageFull", aname="_percentageFull", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositorySpaceId", aname="_repositorySpaceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="used", aname="_used", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._activeCount = None
                    self._deletedCount = None
                    self._free = None
                    self._inactiveCount = None
                    self._orphanedCount = None
                    self._percentageFull = None
                    self._repositorySpaceId = None
                    self._size = None
                    self._used = None
                    return
            Holder.__name__ = "repositorySpaceWsResult_Holder"
            self.pyclass = Holder

    class queryTdbPublishers_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbPublishers")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbPublishers_Def.schema
            TClist = [ZSI.TC.String(pname="tdbPublisherQuery", aname="_tdbPublisherQuery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tdbPublisherQuery = None
                    return
            Holder.__name__ = "queryTdbPublishers_Holder"
            self.pyclass = Holder

    class queryTdbPublishersResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "queryTdbPublishersResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryTdbPublishersResponse_Def.schema
            TClist = [GTD("http://status.ws.lockss.org/","tdbPublisherWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryTdbPublishersResponse_Holder"
            self.pyclass = Holder

    class agreementTypeWsResult_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://status.ws.lockss.org/"
        type = (schema, "agreementTypeWsResult")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getAuIds_Dec(ElementDeclaration):
        literal = "getAuIds"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getAuIds")
            kw["aname"] = "_getAuIds"
            if ns0.getAuIds_Def not in ns0.getAuIds_Dec.__bases__:
                bases = list(ns0.getAuIds_Dec.__bases__)
                bases.insert(0, ns0.getAuIds_Def)
                ns0.getAuIds_Dec.__bases__ = tuple(bases)

            ns0.getAuIds_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuIds_Dec_Holder"

    class getAuIdsResponse_Dec(ElementDeclaration):
        literal = "getAuIdsResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getAuIdsResponse")
            kw["aname"] = "_getAuIdsResponse"
            if ns0.getAuIdsResponse_Def not in ns0.getAuIdsResponse_Dec.__bases__:
                bases = list(ns0.getAuIdsResponse_Dec.__bases__)
                bases.insert(0, ns0.getAuIdsResponse_Def)
                ns0.getAuIdsResponse_Dec.__bases__ = tuple(bases)

            ns0.getAuIdsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuIdsResponse_Dec_Holder"

    class getAuStatus_Dec(ElementDeclaration):
        literal = "getAuStatus"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getAuStatus")
            kw["aname"] = "_getAuStatus"
            if ns0.getAuStatus_Def not in ns0.getAuStatus_Dec.__bases__:
                bases = list(ns0.getAuStatus_Dec.__bases__)
                bases.insert(0, ns0.getAuStatus_Def)
                ns0.getAuStatus_Dec.__bases__ = tuple(bases)

            ns0.getAuStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuStatus_Dec_Holder"

    class getAuStatusResponse_Dec(ElementDeclaration):
        literal = "getAuStatusResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getAuStatusResponse")
            kw["aname"] = "_getAuStatusResponse"
            if ns0.getAuStatusResponse_Def not in ns0.getAuStatusResponse_Dec.__bases__:
                bases = list(ns0.getAuStatusResponse_Dec.__bases__)
                bases.insert(0, ns0.getAuStatusResponse_Def)
                ns0.getAuStatusResponse_Dec.__bases__ = tuple(bases)

            ns0.getAuStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuStatusResponse_Dec_Holder"

    class getPlatformConfiguration_Dec(ElementDeclaration):
        literal = "getPlatformConfiguration"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getPlatformConfiguration")
            kw["aname"] = "_getPlatformConfiguration"
            if ns0.getPlatformConfiguration_Def not in ns0.getPlatformConfiguration_Dec.__bases__:
                bases = list(ns0.getPlatformConfiguration_Dec.__bases__)
                bases.insert(0, ns0.getPlatformConfiguration_Def)
                ns0.getPlatformConfiguration_Dec.__bases__ = tuple(bases)

            ns0.getPlatformConfiguration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPlatformConfiguration_Dec_Holder"

    class getPlatformConfigurationResponse_Dec(ElementDeclaration):
        literal = "getPlatformConfigurationResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","getPlatformConfigurationResponse")
            kw["aname"] = "_getPlatformConfigurationResponse"
            if ns0.getPlatformConfigurationResponse_Def not in ns0.getPlatformConfigurationResponse_Dec.__bases__:
                bases = list(ns0.getPlatformConfigurationResponse_Dec.__bases__)
                bases.insert(0, ns0.getPlatformConfigurationResponse_Def)
                ns0.getPlatformConfigurationResponse_Dec.__bases__ = tuple(bases)

            ns0.getPlatformConfigurationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPlatformConfigurationResponse_Dec_Holder"

    class isDaemonReady_Dec(ElementDeclaration):
        literal = "isDaemonReady"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","isDaemonReady")
            kw["aname"] = "_isDaemonReady"
            if ns0.isDaemonReady_Def not in ns0.isDaemonReady_Dec.__bases__:
                bases = list(ns0.isDaemonReady_Dec.__bases__)
                bases.insert(0, ns0.isDaemonReady_Def)
                ns0.isDaemonReady_Dec.__bases__ = tuple(bases)

            ns0.isDaemonReady_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "isDaemonReady_Dec_Holder"

    class isDaemonReadyResponse_Dec(ElementDeclaration):
        literal = "isDaemonReadyResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","isDaemonReadyResponse")
            kw["aname"] = "_isDaemonReadyResponse"
            if ns0.isDaemonReadyResponse_Def not in ns0.isDaemonReadyResponse_Dec.__bases__:
                bases = list(ns0.isDaemonReadyResponse_Dec.__bases__)
                bases.insert(0, ns0.isDaemonReadyResponse_Def)
                ns0.isDaemonReadyResponse_Dec.__bases__ = tuple(bases)

            ns0.isDaemonReadyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "isDaemonReadyResponse_Dec_Holder"

    class queryAus_Dec(ElementDeclaration):
        literal = "queryAus"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryAus")
            kw["aname"] = "_queryAus"
            if ns0.queryAus_Def not in ns0.queryAus_Dec.__bases__:
                bases = list(ns0.queryAus_Dec.__bases__)
                bases.insert(0, ns0.queryAus_Def)
                ns0.queryAus_Dec.__bases__ = tuple(bases)

            ns0.queryAus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryAus_Dec_Holder"

    class queryAusResponse_Dec(ElementDeclaration):
        literal = "queryAusResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryAusResponse")
            kw["aname"] = "_queryAusResponse"
            if ns0.queryAusResponse_Def not in ns0.queryAusResponse_Dec.__bases__:
                bases = list(ns0.queryAusResponse_Dec.__bases__)
                bases.insert(0, ns0.queryAusResponse_Def)
                ns0.queryAusResponse_Dec.__bases__ = tuple(bases)

            ns0.queryAusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryAusResponse_Dec_Holder"

    class queryCrawls_Dec(ElementDeclaration):
        literal = "queryCrawls"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryCrawls")
            kw["aname"] = "_queryCrawls"
            if ns0.queryCrawls_Def not in ns0.queryCrawls_Dec.__bases__:
                bases = list(ns0.queryCrawls_Dec.__bases__)
                bases.insert(0, ns0.queryCrawls_Def)
                ns0.queryCrawls_Dec.__bases__ = tuple(bases)

            ns0.queryCrawls_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryCrawls_Dec_Holder"

    class queryCrawlsResponse_Dec(ElementDeclaration):
        literal = "queryCrawlsResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryCrawlsResponse")
            kw["aname"] = "_queryCrawlsResponse"
            if ns0.queryCrawlsResponse_Def not in ns0.queryCrawlsResponse_Dec.__bases__:
                bases = list(ns0.queryCrawlsResponse_Dec.__bases__)
                bases.insert(0, ns0.queryCrawlsResponse_Def)
                ns0.queryCrawlsResponse_Dec.__bases__ = tuple(bases)

            ns0.queryCrawlsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryCrawlsResponse_Dec_Holder"

    class queryPeers_Dec(ElementDeclaration):
        literal = "queryPeers"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPeers")
            kw["aname"] = "_queryPeers"
            if ns0.queryPeers_Def not in ns0.queryPeers_Dec.__bases__:
                bases = list(ns0.queryPeers_Dec.__bases__)
                bases.insert(0, ns0.queryPeers_Def)
                ns0.queryPeers_Dec.__bases__ = tuple(bases)

            ns0.queryPeers_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPeers_Dec_Holder"

    class queryPeersResponse_Dec(ElementDeclaration):
        literal = "queryPeersResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPeersResponse")
            kw["aname"] = "_queryPeersResponse"
            if ns0.queryPeersResponse_Def not in ns0.queryPeersResponse_Dec.__bases__:
                bases = list(ns0.queryPeersResponse_Dec.__bases__)
                bases.insert(0, ns0.queryPeersResponse_Def)
                ns0.queryPeersResponse_Dec.__bases__ = tuple(bases)

            ns0.queryPeersResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPeersResponse_Dec_Holder"

    class queryPlugins_Dec(ElementDeclaration):
        literal = "queryPlugins"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPlugins")
            kw["aname"] = "_queryPlugins"
            if ns0.queryPlugins_Def not in ns0.queryPlugins_Dec.__bases__:
                bases = list(ns0.queryPlugins_Dec.__bases__)
                bases.insert(0, ns0.queryPlugins_Def)
                ns0.queryPlugins_Dec.__bases__ = tuple(bases)

            ns0.queryPlugins_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPlugins_Dec_Holder"

    class queryPluginsResponse_Dec(ElementDeclaration):
        literal = "queryPluginsResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPluginsResponse")
            kw["aname"] = "_queryPluginsResponse"
            if ns0.queryPluginsResponse_Def not in ns0.queryPluginsResponse_Dec.__bases__:
                bases = list(ns0.queryPluginsResponse_Dec.__bases__)
                bases.insert(0, ns0.queryPluginsResponse_Def)
                ns0.queryPluginsResponse_Dec.__bases__ = tuple(bases)

            ns0.queryPluginsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPluginsResponse_Dec_Holder"

    class queryPolls_Dec(ElementDeclaration):
        literal = "queryPolls"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPolls")
            kw["aname"] = "_queryPolls"
            if ns0.queryPolls_Def not in ns0.queryPolls_Dec.__bases__:
                bases = list(ns0.queryPolls_Dec.__bases__)
                bases.insert(0, ns0.queryPolls_Def)
                ns0.queryPolls_Dec.__bases__ = tuple(bases)

            ns0.queryPolls_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPolls_Dec_Holder"

    class queryPollsResponse_Dec(ElementDeclaration):
        literal = "queryPollsResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryPollsResponse")
            kw["aname"] = "_queryPollsResponse"
            if ns0.queryPollsResponse_Def not in ns0.queryPollsResponse_Dec.__bases__:
                bases = list(ns0.queryPollsResponse_Dec.__bases__)
                bases.insert(0, ns0.queryPollsResponse_Def)
                ns0.queryPollsResponse_Dec.__bases__ = tuple(bases)

            ns0.queryPollsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryPollsResponse_Dec_Holder"

    class queryRepositories_Dec(ElementDeclaration):
        literal = "queryRepositories"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryRepositories")
            kw["aname"] = "_queryRepositories"
            if ns0.queryRepositories_Def not in ns0.queryRepositories_Dec.__bases__:
                bases = list(ns0.queryRepositories_Dec.__bases__)
                bases.insert(0, ns0.queryRepositories_Def)
                ns0.queryRepositories_Dec.__bases__ = tuple(bases)

            ns0.queryRepositories_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRepositories_Dec_Holder"

    class queryRepositoriesResponse_Dec(ElementDeclaration):
        literal = "queryRepositoriesResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryRepositoriesResponse")
            kw["aname"] = "_queryRepositoriesResponse"
            if ns0.queryRepositoriesResponse_Def not in ns0.queryRepositoriesResponse_Dec.__bases__:
                bases = list(ns0.queryRepositoriesResponse_Dec.__bases__)
                bases.insert(0, ns0.queryRepositoriesResponse_Def)
                ns0.queryRepositoriesResponse_Dec.__bases__ = tuple(bases)

            ns0.queryRepositoriesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRepositoriesResponse_Dec_Holder"

    class queryRepositorySpaces_Dec(ElementDeclaration):
        literal = "queryRepositorySpaces"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryRepositorySpaces")
            kw["aname"] = "_queryRepositorySpaces"
            if ns0.queryRepositorySpaces_Def not in ns0.queryRepositorySpaces_Dec.__bases__:
                bases = list(ns0.queryRepositorySpaces_Dec.__bases__)
                bases.insert(0, ns0.queryRepositorySpaces_Def)
                ns0.queryRepositorySpaces_Dec.__bases__ = tuple(bases)

            ns0.queryRepositorySpaces_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRepositorySpaces_Dec_Holder"

    class queryRepositorySpacesResponse_Dec(ElementDeclaration):
        literal = "queryRepositorySpacesResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryRepositorySpacesResponse")
            kw["aname"] = "_queryRepositorySpacesResponse"
            if ns0.queryRepositorySpacesResponse_Def not in ns0.queryRepositorySpacesResponse_Dec.__bases__:
                bases = list(ns0.queryRepositorySpacesResponse_Dec.__bases__)
                bases.insert(0, ns0.queryRepositorySpacesResponse_Def)
                ns0.queryRepositorySpacesResponse_Dec.__bases__ = tuple(bases)

            ns0.queryRepositorySpacesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRepositorySpacesResponse_Dec_Holder"

    class queryTdbAus_Dec(ElementDeclaration):
        literal = "queryTdbAus"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbAus")
            kw["aname"] = "_queryTdbAus"
            if ns0.queryTdbAus_Def not in ns0.queryTdbAus_Dec.__bases__:
                bases = list(ns0.queryTdbAus_Dec.__bases__)
                bases.insert(0, ns0.queryTdbAus_Def)
                ns0.queryTdbAus_Dec.__bases__ = tuple(bases)

            ns0.queryTdbAus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbAus_Dec_Holder"

    class queryTdbAusResponse_Dec(ElementDeclaration):
        literal = "queryTdbAusResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbAusResponse")
            kw["aname"] = "_queryTdbAusResponse"
            if ns0.queryTdbAusResponse_Def not in ns0.queryTdbAusResponse_Dec.__bases__:
                bases = list(ns0.queryTdbAusResponse_Dec.__bases__)
                bases.insert(0, ns0.queryTdbAusResponse_Def)
                ns0.queryTdbAusResponse_Dec.__bases__ = tuple(bases)

            ns0.queryTdbAusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbAusResponse_Dec_Holder"

    class queryTdbPublishers_Dec(ElementDeclaration):
        literal = "queryTdbPublishers"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbPublishers")
            kw["aname"] = "_queryTdbPublishers"
            if ns0.queryTdbPublishers_Def not in ns0.queryTdbPublishers_Dec.__bases__:
                bases = list(ns0.queryTdbPublishers_Dec.__bases__)
                bases.insert(0, ns0.queryTdbPublishers_Def)
                ns0.queryTdbPublishers_Dec.__bases__ = tuple(bases)

            ns0.queryTdbPublishers_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbPublishers_Dec_Holder"

    class queryTdbPublishersResponse_Dec(ElementDeclaration):
        literal = "queryTdbPublishersResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbPublishersResponse")
            kw["aname"] = "_queryTdbPublishersResponse"
            if ns0.queryTdbPublishersResponse_Def not in ns0.queryTdbPublishersResponse_Dec.__bases__:
                bases = list(ns0.queryTdbPublishersResponse_Dec.__bases__)
                bases.insert(0, ns0.queryTdbPublishersResponse_Def)
                ns0.queryTdbPublishersResponse_Dec.__bases__ = tuple(bases)

            ns0.queryTdbPublishersResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbPublishersResponse_Dec_Holder"

    class queryTdbTitles_Dec(ElementDeclaration):
        literal = "queryTdbTitles"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbTitles")
            kw["aname"] = "_queryTdbTitles"
            if ns0.queryTdbTitles_Def not in ns0.queryTdbTitles_Dec.__bases__:
                bases = list(ns0.queryTdbTitles_Dec.__bases__)
                bases.insert(0, ns0.queryTdbTitles_Def)
                ns0.queryTdbTitles_Dec.__bases__ = tuple(bases)

            ns0.queryTdbTitles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbTitles_Dec_Holder"

    class queryTdbTitlesResponse_Dec(ElementDeclaration):
        literal = "queryTdbTitlesResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryTdbTitlesResponse")
            kw["aname"] = "_queryTdbTitlesResponse"
            if ns0.queryTdbTitlesResponse_Def not in ns0.queryTdbTitlesResponse_Dec.__bases__:
                bases = list(ns0.queryTdbTitlesResponse_Dec.__bases__)
                bases.insert(0, ns0.queryTdbTitlesResponse_Def)
                ns0.queryTdbTitlesResponse_Dec.__bases__ = tuple(bases)

            ns0.queryTdbTitlesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryTdbTitlesResponse_Dec_Holder"

    class queryVotes_Dec(ElementDeclaration):
        literal = "queryVotes"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryVotes")
            kw["aname"] = "_queryVotes"
            if ns0.queryVotes_Def not in ns0.queryVotes_Dec.__bases__:
                bases = list(ns0.queryVotes_Dec.__bases__)
                bases.insert(0, ns0.queryVotes_Def)
                ns0.queryVotes_Dec.__bases__ = tuple(bases)

            ns0.queryVotes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryVotes_Dec_Holder"

    class queryVotesResponse_Dec(ElementDeclaration):
        literal = "queryVotesResponse"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","queryVotesResponse")
            kw["aname"] = "_queryVotesResponse"
            if ns0.queryVotesResponse_Def not in ns0.queryVotesResponse_Dec.__bases__:
                bases = list(ns0.queryVotesResponse_Dec.__bases__)
                bases.insert(0, ns0.queryVotesResponse_Def)
                ns0.queryVotesResponse_Dec.__bases__ = tuple(bases)

            ns0.queryVotesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryVotesResponse_Dec_Holder"

    class LockssWebServicesFault_Dec(ElementDeclaration):
        literal = "LockssWebServicesFault"
        schema = "http://status.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://status.ws.lockss.org/","LockssWebServicesFault")
            kw["aname"] = "_LockssWebServicesFault"
            if ns0.lockssWebServicesFaultInfo_Def not in ns0.LockssWebServicesFault_Dec.__bases__:
                bases = list(ns0.LockssWebServicesFault_Dec.__bases__)
                bases.insert(0, ns0.lockssWebServicesFaultInfo_Def)
                ns0.LockssWebServicesFault_Dec.__bases__ = tuple(bases)

            ns0.lockssWebServicesFaultInfo_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "LockssWebServicesFault_Dec_Holder"

# end class ns0 (tns: http://status.ws.lockss.org/)
